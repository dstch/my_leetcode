# Given a string s, find the length of the longest substring without repeating c
# haracters. 
# 
#  
#  Example 1: 
# 
#  
# Input: s = "abcabcbb"
# Output: 3
# Explanation: The answer is "abc", with the length of 3.
#  
# 
#  Example 2: 
# 
#  
# Input: s = "bbbbb"
# Output: 1
# Explanation: The answer is "b", with the length of 1.
#  
# 
#  Example 3: 
# 
#  
# Input: s = "pwwkew"
# Output: 3
# Explanation: The answer is "wke", with the length of 3.
# Notice that the answer must be a substring, "pwke" is a subsequence and not a 
# substring.
#  
# 
#  Example 4: 
# 
#  
# Input: s = ""
# Output: 0
#  
# 
#  
#  Constraints: 
# 
#  
#  0 <= s.length <= 5 * 104 
#  s consists of English letters, digits, symbols and spaces. 
#  
#  Related Topics Hash Table Two Pointers String Sliding Window 
#  üëç 14247 üëé 733


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        """
        ‰ΩøÁî®ÊªëÂä®Á™óÂè£Ëß£È¢ò
        Á™óÂè£ÁöÑÂè≥ËæπÁïåÂ∞±ÊòØÂΩìÂâçÈÅçÂéÜÂà∞ÁöÑÂ≠óÁ¨¶ÁöÑ‰ΩçÁΩÆÔºå‰∏∫‰∫ÜÊ±ÇÂá∫Á™óÂè£ÁöÑÂ§ßÂ∞èÔºåÊàë‰ª¨ÈúÄË¶Å‰∏Ä‰∏™ÂèòÈáè left Êù•ÊåáÂêëÊªëÂä®Á™óÂè£ÁöÑÂ∑¶ËæπÁïåÔºåËøôÊ†∑ÔºåÂ¶ÇÊûúÂΩìÂâçÈÅçÂéÜÂà∞ÁöÑÂ≠óÁ¨¶‰ªéÊú™Âá∫Áé∞ËøáÔºåÈÇ£‰πàÁõ¥Êé•Êâ©Â§ßÂè≥ËæπÁïåÔºåÂ¶ÇÊûú‰πãÂâçÂá∫Áé∞ËøáÔºåÈÇ£‰πàÂ∞±ÂàÜ‰∏§ÁßçÊÉÖÂÜµÔºåÂú®Êàñ‰∏çÂú®ÊªëÂä®Á™óÂè£ÂÜÖÔºåÂ¶ÇÊûú‰∏çÂú®ÊªëÂä®Á™óÂè£ÂÜÖÔºåÂΩìÂâçÂ≠óÁ¨¶ÂèØ‰ª•Áõ¥Êé•Âä†ËøõÊù•ÔºåÂ¶ÇÊûúÂú®ÁöÑËØùÔºåÂ∞±ÈúÄË¶ÅÂÖàÂú®ÊªëÂä®Á™óÂè£ÂÜÖÂéªÊéâËøô‰∏™Â∑≤ÁªèÂá∫Áé∞ËøáÁöÑÂ≠óÁ¨¶ÔºåÂéªÊéâÁöÑÊñπÊ≥ïÂπ∂‰∏çÈúÄË¶ÅÂ∞ÜÂ∑¶ËæπÁïå left ‰∏Ä‰Ωç‰∏Ä‰ΩçÂêëÂè≥ÈÅçÂéÜÊü•ÊâæÔºåÁî±‰∫éÊàë‰ª¨ÁöÑ int[] Â∑≤Áªè‰øùÂ≠ò‰∫ÜËØ•ÈáçÂ§çÂ≠óÁ¨¶ÊúÄÂêéÂá∫Áé∞ÁöÑ‰ΩçÁΩÆÔºåÊâÄ‰ª•Áõ¥Êé•ÁßªÂä® left ÊåáÈíàÂ∞±ÂèØ‰ª•‰∫Ü„ÄÇÊàë‰ª¨Áª¥Êä§‰∏Ä‰∏™ÁªìÊûú resÔºåÊØèÊ¨°Áî®Âá∫Áé∞ËøáÁöÑÁ™óÂè£Â§ßÂ∞èÊù•Êõ¥Êñ∞ÁªìÊûú resÔºåÂ∞±ÂèØ‰ª•ÂæóÂà∞ÊúÄÁªàÁªìÊûú‰∫Ü„ÄÇ
        ÂÖ∂ÂÆûÊàë‰ª¨Âπ∂‰∏çÈúÄË¶ÅÂà§Êñ≠ÂΩìÂâçÂ≠óÁ¨¶ÊòØÂê¶Â∑≤ÁªèÂú®ÊªëÂä®Á™óÂè£‰∏≠Âá∫Áé∞ÔºåÂè™Ë¶ÅÊàë‰ª¨ÊØèÈÅçÂéÜ‰∏Ä‰∏™Â≠óÁ¨¶Ôºå‰øùËØÅ left = Math.max(left, m[s.charAt(i)]) Âç≥ÂèØÔºåÁõ∏ÂΩì‰∫éÊâßË°å‰∏äÈù¢ÊâÄËø∞ÁöÑÂà§Êñ≠Êìç‰Ωú„ÄÇ
        """
        sub = ""
        res = 0
        for i in s:
            if i not in sub:
                sub += i
                res = max(res, len(sub))
            else:
                sub += i
                sub = sub[sub.index(i) + 1:]
        return res
    # def lengthOfLongestSubstring(self, s: str) -> int:
    #     if not s:
    #         return 0
    #     res = [s[0]]
    #     dic = {s[0]: 0}
    #     left, right = 0, 1
    #     length = 1
    #     while len(s) > right > left:
    #         if s[right] in res:  # Âá∫Áé∞ÈáçÂ§ç
    #             left = dic[s[right]] + 1
    #             dic[s[right]] = right
    #             res.clear()
    #             right += 1
    #             res.extend([x for x in s[left:right]])
    #         else:
    #             length = max(length, right - left + 1)
    #             res.append(s[right])
    #             dic[s[right]] = right
    #             right += 1
    #     return length


# leetcode submit region end(Prohibit modification and deletion)
if __name__ == '__main__':
    s = 'abcabcbb'
    ss = Solution()
    a = ss.lengthOfLongestSubstring(s)
    print(a)
